@*
    EventsPage Component
    
    Purpose: Provides the main event management interface for the EventEase application with comprehensive 
    event listing, creation, editing, and deletion capabilities.
    
    Features:
    - Paginated event listing with load-more functionality (4 events per page default)
    - Event creation and editing through integrated EventForm component
    - Event deletion with detailed confirmation dialogs showing impact
    - Real-time statistics display for registrations and attendance per event
    - Sample data loading for testing and demonstration purposes
    - Comprehensive help system with detailed feature explanations
    - Error handling with user-friendly messages and recovery options
    - Navigation links to related pages (attendance tracking)
    
    Route:
    - /events: Main events listing page
    - /events?action=add: Auto-opens event creation form
    
    Data Management:
    - Implements progressive loading with pagination state preservation
    - Syncs with EventState service for cross-component data consistency
    - Handles cancellation tokens for async operations
    - Maintains registration and attendance counts per event
    - Supports bulk operations (sample data loading)
    
    User Interactions:
    - Add New Event: Opens EventForm for creating new events
    - Edit Event: Delegates to EventForm with pre-populated data
    - Delete Event: Shows detailed confirmation with impact analysis
    - Load More Events: Expands list with additional pages
    - Load Sample Data: Populates application with test data
    - Help System: Contextual help with feature descriptions
    
    State Management:
    - Tracks pagination state and current page size
    - Manages form visibility and selected event state
    - Coordinates with HybridEventStateService for form state
    - Preserves user position during data refreshes
    - Handles loading states and error conditions
    
    Error Handling:
    - Operation-specific error messages for different failure scenarios
    - Graceful degradation with retry mechanisms
    - User-friendly error display with dismissible alerts
    - Logging integration for debugging and monitoring
    
    Dependencies:
    - IEventService: Event CRUD operations
    - IRegistrationService: Registration data for statistics
    - IMockDataService: Sample data generation
    - IHybridEventStateService: Event state management
    - NavigationManager: URL handling and routing
    - EventForm: Event creation and editing interface
    - EventCard: Individual event display and actions
    - ModalDialog: Confirmations and help display
    
    Usage: Main entry point for event management accessed via navigation menu.
    Central hub for all event-related operations in the EventEase application.
*@

@page "/events"
@inject IEventService EventService
@inject IRegistrationService RegistrationService
@inject IMockDataService MockDataService
@inject IHybridEventStateService EventState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<EventsPage> Logger

<PageTitle>Events List | Events Manager</PageTitle>

@if (hasError)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        <strong>Error:</strong> @errorMessage
        <button type="button" class="btn-close" @onclick="ClearError" aria-label="Close"></button>
    </div>
}

<div class="d-flex justify-content-between align-items-start mb-4">
    <div>
        <h1 class="mb-2">
            <i class="bi bi-calendar2-event me-2"></i>Event List
        </h1>
        <a class="btn btn-secondary btn-sm" href="attendance">Go to Attendance</a>
    </div>
    <button class="btn btn-outline-dark btn-sm" @onclick="ShowHelp">
        <i class="bi bi-question-circle me-1"></i>Help
    </button>
</div>

@if (showForm)
{
    <EventForm Event="selectedEvent" OnValidSubmitCallback="SaveEventAsync" OnCancelCallback="CancelEditAsync" />
}
else
{
    <button class="btn btn-primary mb-3" @onclick="AddNewEventAsync">Add New Event</button>

    @if (events?.Any() == true)
    {
        <div class="row row-cols-1 row-cols-md-2 g-3">
            @foreach (var evt in events)
            {
                <div class="col mb-5">
                    <EventCard Event="@evt" Statistics="@GetEventStatistics(evt)" OnEditEvent="EditEvent"
                        OnDeleteEvent="ConfirmDelete" />
                </div>
            }
        </div>

        @if (hasMoreEvents)
        {
            <div class="text-center mt-4">
                <button class="btn btn-outline-primary" @onclick="LoadMoreEventsAsync" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    }
                    Load More Events (@(totalEvents - events.Count) remaining)
                </button>
            </div>
        }

        <div class="text-center mt-2 text-muted">
            <small>Showing @events.Count of @totalEvents events</small>
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading events...</p>
        </div>
    }
    else
    {
        <p>No events found. Why not create one?</p>
        <p>... or click on 'Load Sample Data' below.</p>
    }

    <button class="btn btn-secondary mb-3" @onclick="ConfirmSeedMockData">Load Sample Data</button>
}

<ModalDialog @ref="confirmDialog" Title="@dialogTitle" OnConfirm="OnDialogConfirm" OnCancel="ClearPendingDialog"
    ConfirmButtonClass="@GetConfirmButtonClass()" ConfirmText="@GetConfirmButtonText()"
    ShowConfirmButton="@(pendingAction != "help")" CancelText="@(pendingAction == "help" ? "Close" : "Cancel")">

    @if (pendingAction == "help")
    {
        <div class="help-content">
            <h5><i class="bi bi-info-circle text-info me-2"></i>Events Page Functions</h5>
            <hr />
            <div class="mb-3">
                <h6><i class="bi bi-plus-circle text-success me-2"></i>Add New Event</h6>
                <p class="text-muted mb-2">Click the "Add New Event" button to create a new event. Fill in the event details
                    including name, date, location, and notes.</p>
            </div>
            <div class="mb-3">
                <h6><i class="bi bi-pencil text-warning me-2"></i>Edit Event</h6>
                <p class="text-muted mb-2">Use the "Edit" button on any event card to modify event details. Changes are
                    saved immediately.</p>
            </div>
            <div class="mb-3">
                <h6><i class="bi bi-trash text-danger me-2"></i>Delete Event</h6>
                <p class="text-muted mb-2">Click "Delete" to remove an event. This action will also remove all associated
                    registrations.</p>
            </div>
            <div class="mb-3">
                <h6><i class="bi bi-eye text-primary me-2"></i>View Details</h6>
                <p class="text-muted mb-2">Click "View Details" on any event card to see full event information and manage
                    registrations.</p>
            </div>
            <div class="mb-3">
                <h6><i class="bi bi-arrow-down-circle text-secondary me-2"></i>Load More</h6>
                <p class="text-muted mb-2">Events are loaded in batches. Use "Load More Events" to see additional events
                    when available.</p>
            </div>
            <div class="mb-0">
                <h6><i class="bi bi-database text-info me-2"></i>Sample Data</h6>
                <p class="text-muted mb-0">Click "Load Sample Data" to populate the application with example events and
                    registrations for testing.</p>
            </div>
        </div>
    }
    else if (pendingAction == "delete" && eventToDelete != null)
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong>Are you sure you want to delete this event?</strong>
        </div>
        <div class="mt-3">
            <div class="row">
                <div class="col-sm-6">
                    <strong><i class="bi bi-calendar-event me-2 text-muted"></i>Event:</strong><br />
                    <span class="ms-4">@eventToDelete.Name</span>
                </div>
                <div class="col-sm-6">
                    <strong><i class="bi bi-clock me-2 text-muted"></i>Date:</strong><br />
                    <span class="ms-4">@eventToDelete.Date.ToString("MMM dd, yyyy")</span>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-sm-6">
                    <strong><i class="bi bi-geo-alt me-2 text-muted"></i>Location:</strong><br />
                    <span class="ms-4">@eventToDelete.Location</span>
                </div>
                <div class="col-sm-6">
                    <strong><i class="bi bi-people me-2 text-muted"></i>Impact:</strong><br />
                    <span class="ms-4">@GetRegistrationCount(eventToDelete.Id) registration(s)</span><br />
                    <span class="ms-4">@GetAttendeeCount(eventToDelete.Id) attendee(s)</span>
                </div>
            </div>

            @if (!string.IsNullOrWhiteSpace(eventToDelete.Notes))
            {
                <div class="mt-2">
                    <strong><i class="bi bi-sticky me-2 text-muted"></i>Notes:</strong><br />
                    <div class="border rounded p-2 bg-light mt-1">
                        <small>@eventToDelete.Notes</small>
                    </div>
                </div>
            }

            @if (GetRegistrationCount(eventToDelete.Id) > 0)
            {
                <div class="alert alert-danger mt-3 mb-0">
                    <i class="bi bi-exclamation-circle me-2"></i>
                    <strong>Warning:</strong> This will permanently delete <strong>@GetRegistrationCount(eventToDelete.Id)
                        registration(s)</strong> associated with this event.
                </div>
            }

            <small class="text-muted d-block mt-2">This action cannot be undone.</small>
        </div>
    }
    else if (pendingAction == "seed")
    {
        <div class="alert alert-info">
            <i class="bi bi-database me-2"></i>
            <strong>Load Sample Data</strong>
        </div>
        <p>This will populate the application with sample events and registrations for testing purposes.</p>

        <div class="row">
            <div class="col-sm-6">
                <h6><i class="bi bi-calendar-plus me-2 text-primary"></i>Sample Events</h6>
                <ul class="list-unstyled ms-3">
                    <li><small>• Technology conferences</small></li>
                    <li><small>• Team meetings</small></li>
                    <li><small>• Training sessions</small></li>
                    <li><small>• Social events</small></li>
                </ul>
            </div>
            <div class="col-sm-6">
                <h6><i class="bi bi-person-plus me-2 text-success"></i>Sample Registrations</h6>
                <ul class="list-unstyled ms-3">
                    <li><small>• Multiple attendees per event</small></li>
                    <li><small>• Varied attendance status</small></li>
                    <li><small>• Contact information</small></li>
                    <li><small>• Registration notes</small></li>
                </ul>
            </div>
        </div>

        <div class="alert alert-warning mt-3">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Warning:</strong> This will overwrite all current events and registrations.
        </div>

        @if (events?.Any() == true)
        {
            <div class="alert alert-danger">
                <i class="bi bi-trash me-2"></i>
                <strong>Current Data Impact:</strong> This will delete <strong>@events.Count event(s)</strong> and
                <strong>@registrations.Count registration(s)</strong>.
            </div>
        }
    }
    else
    {
        @dialogMessage
    }
</ModalDialog>

@code {
    private List<Event> events = new();
    private Event? selectedEvent;
    private bool showForm = false;
    private Event? eventToDelete;
    private ModalDialog? confirmDialog;
    private List<Registration> registrations = new List<Registration>();

    private string dialogTitle = "Confirm";
    private string dialogMessage = "";
    private string? pendingAction = null;

    private int currentPage = 1;
    private int pageSize = 4;
    private int totalEvents = 0;
    private bool isLoading = false;
    private bool isCreatingNewEvent = false;
    private bool hasMoreEvents => events.Count < totalEvents;
    private CancellationTokenSource? _cancellationTokenSource;

    private string? errorMessage = null;
    private bool hasError => !string.IsNullOrEmpty(errorMessage);

    protected override async Task OnInitializedAsync()
    {
        await LoadEventsAsync();
        await LoadRegistrationsAsync();

        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (query["action"] == "add")
        {
            await AddNewEventAsync();
            Navigation.NavigateTo("events", replace: true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        }
    }

    private async Task ReloadDataAsync()
    {
        currentPage = 1;
        await LoadEventsAsync(loadMore: false, preserveCurrentState: false);
        await LoadRegistrationsAsync();
    }

    private async Task LoadRegistrationsAsync()
    {
        registrations = await RegistrationService.GetAllAsync();
        UpdateEventCounts();
    }

    private async Task LoadEventsAsync(bool loadMore = false, bool preserveCurrentState = false, int? requestedPageSize =
    null)
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();

        isLoading = true;
        StateHasChanged();

        try
        {
            ClearError();

            if (preserveCurrentState && events.Any())
            {
                var itemsToLoad = events.Count;

                var pagedResult = await EventService.GetPagedAsync(1, itemsToLoad, _cancellationTokenSource.Token);
                events = pagedResult.Items;
                totalEvents = pagedResult.TotalCount;

                currentPage = (int)Math.Ceiling((double)itemsToLoad / pageSize);

                EventState.CurrentEventPageSize = events.Count;
            }
            else if (loadMore)
            {
                var nextPage = (int)Math.Ceiling((double)events.Count / pageSize) + 1;
                var pagedResult = await EventService.GetPagedAsync(nextPage, pageSize, _cancellationTokenSource.Token);

                events.AddRange(pagedResult.Items);
                totalEvents = pagedResult.TotalCount;

                currentPage = (int)Math.Ceiling((double)events.Count / pageSize);

                EventState.CurrentEventPageSize = events.Count;
            }
            else if (requestedPageSize.HasValue)
            {
                var pagedResult = await EventService.GetPagedAsync(1, requestedPageSize.Value, _cancellationTokenSource.Token);
                events = pagedResult.Items;
                totalEvents = pagedResult.TotalCount;

                currentPage = (int)Math.Ceiling((double)events.Count / pageSize);

                EventState.CurrentEventPageSize = events.Count;
            }
            else
            {
                var effectivePageSize = EventState.CurrentEventPageSize ?? pageSize;
                currentPage = 1;

                var pagedResult = await EventService.GetPagedAsync(currentPage, effectivePageSize, _cancellationTokenSource.Token);
                events = pagedResult.Items;
                totalEvents = pagedResult.TotalCount;

                currentPage = (int)Math.Ceiling((double)events.Count / pageSize);

                EventState.CurrentEventPageSize = events.Count;
            }

            UpdateEventCounts();
        }
        catch (OperationCanceledException)
        {
            Logger.LogInformation("Event loading operation was cancelled.");
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to load events. Please refresh the page and try again.";
            Logger.LogError(ex, errorMessage);
            StateHasChanged();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMoreEventsAsync()
    {
        if (hasMoreEvents && !isLoading)
        {
            await LoadEventsAsync(loadMore: true);
        }
    }

    private void UpdateEventCounts()
    {
        EventState.RegistrationCounts.Clear();
        EventState.AttendeeCounts.Clear();
        foreach (var evt in events)
        {
            var regCount = registrations.Count(r => r.EventId == evt.Id);
            EventState.RegistrationCounts[evt.Id] = regCount;
            var attCount = registrations.Count(r => r.EventId == evt.Id && r.AttendedEvent == true);
            EventState.AttendeeCounts[evt.Id] = attCount;
        }
    }

    private async Task SaveEventAsync(Event evt)
    {
        try
        {
            ClearError();

            if (isCreatingNewEvent)
            {
                var currentItemCount = events.Count;
                var newItemCount = currentItemCount + 1;

                await LoadEventsAsync(requestedPageSize: newItemCount);
                isCreatingNewEvent = false;
            }
            else
            {
                await LoadEventsAsync(preserveCurrentState: true);
            }

            await LoadRegistrationsAsync();
            showForm = false;
        }
        catch (Exception ex)
        {
            errorMessage = GetUserFriendlyErrorMessage(ex);
            StateHasChanged();
            await CancelEditAsync();
        }
    }

    private async Task AddNewEventAsync()
    {
        await EventState.InitializeForNewEventAsync();
        selectedEvent = new Event();
        isCreatingNewEvent = true;
        showForm = true;
    }

    private async Task EditEvent(Event evt)
    {
        await EventState.InitializeForEditAsync(evt);
        selectedEvent = evt;
        isCreatingNewEvent = false;
        showForm = true;
    }

    private async Task CancelEditAsync()
    {
        showForm = false;
        selectedEvent = null;
        isCreatingNewEvent = false;
        await EventState.ResetEventFormAsync();
    }

    private EventStatistics GetEventStatistics(Event evt)
    {
        return new EventStatistics
        {
            RegistrationCount = GetRegistrationCount(evt.Id),
            AttendeeCount = GetAttendeeCount(evt.Id)
        };
    }

    private int GetRegistrationCount(Guid eventId)
    {
        return EventState.RegistrationCounts.GetValueOrDefault(eventId, 0);
    }

    private int GetAttendeeCount(Guid eventId)
    {
        return EventState.AttendeeCounts.GetValueOrDefault(eventId, 0);
    }

    private void ShowDialog(string action, string title, string message = "")
    {
        pendingAction = action;
        dialogTitle = title;
        dialogMessage = message;
        confirmDialog?.Show();
    }

    private void ShowHelp()
    {
        ShowDialog("help", "Help - Events Page");
    }

    private void ConfirmDelete(Event evt)
    {
        eventToDelete = evt;
        ShowDialog("delete", "Confirm Delete Event");
    }

    private void ConfirmSeedMockData()
    {
        ShowDialog("seed", "Confirm Load Sample Data");
    }

    private string GetConfirmButtonClass()
    {
        return pendingAction switch
        {
            "delete" => "btn-danger",
            "seed" => "btn-warning",
            _ => "btn-primary"
        };
    }

    private string GetConfirmButtonText()
    {
        return pendingAction switch
        {
            "delete" => "Delete Event",
            "seed" => "Load Sample Data",
            _ => "Confirm"
        };
    }

    private void ClearPendingDialog()
    {
        eventToDelete = null;
        pendingAction = null;
        dialogTitle = "Confirm";
        confirmDialog?.Hide();
    }

    private async Task OnDialogConfirm()
    {
        try
        {
            ClearError();

            if (pendingAction == "delete" && eventToDelete is not null)
            {
                await EventService.DeleteAsync(eventToDelete.Id);
                await ReloadDataAsync();
            }
            else if (pendingAction == "seed")
            {
                EventState.CurrentEventPageSize = pageSize;
                await MockDataService.SeedAllAsync(async () =>
                {
                    await ReloadDataAsync();
                    StateHasChanged();
                });
            }

            ClearPendingDialog();
        }
        catch (Exception ex)
        {
            errorMessage = pendingAction switch
            {
                "delete" => GetDeleteErrorMessage(ex),
                "seed" => GetSeedErrorMessage(ex),
                _ => GetUnexpectedErrorMessage(ex)
            };
            ClearPendingDialog();
            StateHasChanged();
        }
    }

    private void ClearError()
    {
        errorMessage = null;
        StateHasChanged();
    }

    private string GetUserFriendlyErrorMessage(Exception ex)
    {
        return ex switch
        {
            InvalidOperationException => "Unable to save the event. Please check your input and try again.",
            UnauthorizedAccessException => "You don't have permission to perform this action.",
            TimeoutException => "The operation timed out. Please check your connection and try again.",
            ArgumentException => "Invalid data provided. Please check your input.",
            _ => "An unexpected error occurred while saving the event. Please try again."
        };
    }

    private string GetDeleteErrorMessage(Exception ex)
    {
        return ex switch
        {
            InvalidOperationException => "Unable to delete the event. It may have active registrations.",
            UnauthorizedAccessException => "You don't have permission to delete this event.",
            _ => "An error occurred while deleting the event. Please try again."
        };
    }

    private string GetSeedErrorMessage(Exception ex)
    {
        return ex switch
        {
            InvalidOperationException => "Unable to seed mock data. Please try again.",
            UnauthorizedAccessException => "You don't have permission to seed mock data.",
            _ => "An error occurred while seeding mock data. Please try again."
        };
    }

    private string GetUnexpectedErrorMessage(Exception ex)
    {
        return "An unexpected error occurred. Please try again.";
    }

    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
    }
}